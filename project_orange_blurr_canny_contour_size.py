# -*- coding: utf-8 -*-
"""project_orange_blurr_canny_contour_size.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a8vLbk9Sq-Uz7lvRjXe-yOTBp5Z4Trxp
"""

from google.colab import output
# I don't know why nbextensions don't work with python3.6
with output.temporary():
    !pip install - -upgrade git+https: // github.com/Kreijstal/colab_inspector.git
    # yes, really.
    !python2.7 - m pip install - -upgrade git+https: // github.com/blois/colab_inspector.git
    !jupyter nbextension install - -py inspector

# import inspector


import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow

n_da_img = 1

for x in range(1, 35):

    path = '/content/laranjeira_' + str(n_da_img) + '.jpg'
    cv.destroyAllWindows()

    # print(path)

    #img = cv.imread('./laranjeira_15.jpg')
    img = cv.imread(path)

    # Blurring filters
    kX = 7
    kY = 7

    blurred = cv.GaussianBlur(img, (kX, kY), 0)
    #blurred = cv.blur(img,(kX, kY))
    #blurred = cv.medianBlur(img,3)
    # cv2_imshow(blurred)

    hsv = cv.cvtColor(blurred, cv.COLOR_BGR2HSV)
    # cv2_imshow(hsv)

    lower = np.array([1, 50, 120])
    upper = np.array([25, 255, 255])

    mask = cv.inRange(hsv, lower, upper)
    # cv2_imshow(mask)

    masked = cv.bitwise_and(img, img, mask=mask)
    # cv2_imshow(masked)

    canny = cv.Canny(mask, 150, 175)
    # print('Canny')
    # cv2_imshow(canny)

    #Contours###########

    blank = np.zeros(img.shape, dtype='uint8')
    contours, hierarchies = cv.findContours(
        canny, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    #print(f'{contours[8]} contour(s) found!')
    # print(np.size(contours[8]))
    # print(len(contours))

    aux = 0
    length_contours = np.zeros(len(contours))
    for cont in contours:
        length_contours[aux] = np.size(cont)/2
        aux += 1

    # maximum number of point in each identified contour
    maxium_num_points = np.max(length_contours)
    mean_num_points = np.mean(length_contours)
    std_points = np.std(length_contours)
    #print("Maximum value: " + str(np.max(length_contours)))
    #print("Mean: " + str(np.mean(length_contours)))
    #print("Standard deviation: " + str(std_points))

    aux = 0
    naranjas = 0
    # Two/Three standard deviations (µ ± 2σ) empirical rule
    thresholdi = (mean_num_points+1*(std_points))
    #print("Threshold de comprimento do contorno: " + str(thresholdi))
    for cont in contours:
        if length_contours[aux] > thresholdi:
            cv.drawContours(blank, cont, -1, (0, 0, 255), 3)
            naranjas += 1
        aux += 1

    # cv2_imshow(blank)
    # cv2_imshow(img)

    print('larajeira_'+str(n_da_img))
    print('Total de laranjas ' + str(naranjas)+'\n')

    n_da_img += 1
